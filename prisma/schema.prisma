// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Player {
  id        Int      @id @default(autoincrement())
  pseudo    String   @unique
  avatar    String?
  nickname  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  scores        Score[]      @relation("PlayerScores")
  pairsAsPlayer1 PlayerPair[] @relation("Player1")
  pairsAsPlayer2 PlayerPair[] @relation("Player2")
}

model Score {
  id        Int      @id @default(autoincrement())
  playerId  Int
  player    Player   @relation("PlayerScores", fields: [playerId], references: [id])
  isVictory Boolean
  congo     Int      @default(0)
  passage   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlayerPair {
  id        Int      @id @default(autoincrement())
  player1Id Int
  player2Id Int
  victories Int      @default(0)
  defeats   Int      @default(0)
  congo     Int      @default(0)
  passage   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations avec Player
  player1   Player   @relation("Player1", fields: [player1Id], references: [id])
  player2   Player   @relation("Player2", fields: [player2Id], references: [id])

  // Index unique pour Ã©viter les doublons de paires
  @@unique([player1Id, player2Id])
}
